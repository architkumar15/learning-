var first = new List<string>(){ "a","b","c"}; // Left data
var second = new List<string>(){ "a", "c", "d"}; // Right data
GoalKicker.com – C# Notes for Professionals 356
(Inner) Join
var result = from f in first
 join s in second on f equals s
 select new { f, s };
var result = first.Join(second,
 f => f,
 s => s,
 (f, s) => new { f, s });
// Result: {"a","a"}
// {"c","c"}
Left outer join
var leftOuterJoin = from f in first
 join s in second on f equals s into temp
 from t in temp.DefaultIfEmpty()
 select new { First = f, Second = t};
// Or can also do:
var leftOuterJoin = from f in first
 from s in second.Where(x => x == f).DefaultIfEmpty()
 select new { First = f, Second = s};
// Result: {"a","a"}
// {"b", null} 
// {"c","c"} 
// Left outer join method syntax
var leftOuterJoinFluentSyntax = first.GroupJoin(second,
 f => f,
 s => s,
 (f, s) => new { First = f, Second = s })
 .SelectMany(temp => temp.Second.DefaultIfEmpty(),
 (f, s) => new { First = f.First, Second = s });
Right Outer Join
var rightOuterJoin = from s in second
 join f in first on s equals f into temp
 from t in temp.DefaultIfEmpty()
 select new {First=t,Second=s};
// Result: {"a","a"}
// {"c","c"} 
// {null,"d"} 
Cross Join
var CrossJoin = from f in first
 from s in second
 select new { f, s };
// Result: {"a","a"}
// {"a","c"} 
// {"a","d"} 
// {"b","a"}
// {"b","c"} 
// {"b","d"} 
GoalKicker.com – C# Notes for Professionals 357
// {"c","a"}
// {"c","c"} 
// {"c","d"}
Full Outer Join
var fullOuterjoin = leftOuterJoin.Union(rightOuterJoin);



var result = from c in customers
 join p in purchases on c.Id equals p.CustomerId // first join
 join pi in purchaseItems on p.Id equals pi.PurchaseId // second join
 select new
 {
 c.Name, p.Description, pi.Detail
 };


//multiple key join
var query =
 from s in stringProps
 join b in builderProps
 on new { s.Name, s.PropertyType } equals new { b.Name, b.PropertyType }
 select new
 {
 s.Name,
 s.PropertyType,
 StringToken = s.MetadataToken,
 StringBuilderToken = b.MetadataToken
 };
